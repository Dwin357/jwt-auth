c
exit
app.app.default_target
app.default_target
app
response
exit
[o_header, b_body, o_signature].join('.')
original_jwt_string
exit
rq.cookies
rq = Rack::Request.new(env)
exit
rq.session
rq = Rack::Request.new(env)
env
exit
env
c
exit
last_request.session
last_request
exit
JSON::JWT.decode(mid, JwtAuth.config.signing_key)
mid = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI1NGY0ZWI5ZC04NGI5LTRiYzQtYmZjMi03NjVhOWZkNThhYTYiLCJjcmVhdGVkIjoiMjAxNy0wMi0yNFQxMDozNzo1OS40MTItMDU6MDAiLCJ1c2VyX2lkIjozLCJmcmllbmRseV9uYW1lIjoiYmF0buIn0.2hf8y39bwMtfBBYAXfkozp3W-EUHYgjNO2cK6vTyfJqQbkcRCs2q9Kb4xnlyBoKq-Xs1Jq_3ZwXVFOmsx2edvA"
jwt_string
JSON::JWT.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI1NGY0ZWI5ZC04NGI5LTRiYzQtYmZjMi03NjVhOWZkNThhYTYiLCJjcmVhdGVkIjoiMjAxNy0wMi0yNFQxMDozNzo1OS40MTItMDU6MDAiLCJ1c2VyX2lkIjozLCJmcmllbmRseV9uYW1lIjoiYmF0bWFuIn0.2hf8y39bwMtfBBYAXfkozp3W-EUHYgjNO2cK6vTyfJqQbkcRCs2q9Kb4xnlyBoKq-Xs1Jq_3ZwXVFOmsx2ed', JwtAuth.config.signing_key)
JSON::JWT.decode(jwt_string, JwtAuth.config.signing_key)
token_string
JwtAuth.config.signing_key
JSON::JWT.decode(eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI1NGY0ZWI5ZC04NGI5LTRiYzQtYmZjMi03NjVhOWZkNThhYTYiLCJjcmVhdGVkIjoiMjAxNy0wMi0yNFQxMDozNzo1OS40MTItMDU6MDAiLCJ1c2VyX2lkIjozLCJmcmllbmRseV9uYW1lIjoiYmF0bWFuIn0.2hf8y39bwMtfBBYAXfkozp3W-EUHYgjNO2cK6vTyfJqQbkcRCs2q9Kb4xnlyBoKq-Xs1Jq_3ZwXVFOmsx2ed, JwtAuth.config.signing_key)
JSON::JWT.decode(jwt_string, 'bad')
jwt_string
exit
@token.each { |k,v| puts "key:#{k} value:#{v}" }
@token
exit
jwt['jti']
jwt
exit
jwt.signed?
jwt.signed
jwt.to_s
jwt.class
jwt = JwtAuth::JwtToken.stamp_jwt(cl)
JwtAuth::JwtToken.stamp_jwt(cl)
JwtAuth.config.signing_key = 'shared_secret'
JwtAuth::JwtToken.stamp_jwt(cl)
cl = { fnm: 'batman', unm: 'bruce' }
c
exit
self
dup
self
dup
exit
auth_request.logout?
auth_request.session_path?
auth_request.excluded_path?
auth_request.exclude_path?
auth_request
exit
request.cookies[cookie_name].empty?
request.cookies[cookie_name]
cookie_name
request.cookies
exit
request.cookies
request
c
exit
response[2].status
response[2].body
response[2]
response[0]
response.status
response
exit
env
env['PATH_INFO'] = '/authorized'
env.path='/authorized'
env
exit
last_request.env
app.env
app
exit
response
exit
app.default_target
default_target
exit
response
exit
response(status, body, headers)
status
exit
last_request
response
exit
response.location
response
exit
response
exit
last_request.cookies['bad']
last_request.cookies
last_request
exit
last_request.cookies[JwtAuth.config.cookie_name]
last_request.cookies
last_request.cookie
last_request
exit
JSON.parse(response_details.body[0])
response_details.body
response_details
exit
headers
body
status == 302
status.class
status
exit
app
env
status
exit
last_request
last_request.env
last_request.session
last_request.cookies
rp = get '/authorized'
exit
last_request.cookies
last_request.session
last_response.headers
last_request.env.cookies
last_request.env
response.cookies
response = get '/authorized'
cookies
last_request.cookies
last_request
exit
request.params
request.path_info
request.path
exit
JwtAuth.config.settings.clear
JwtAuth.config.settings
JwtAuth.config.sessings.clear
JwtAuth.config
JwtAuth.config.assign({session_paths: ['']})
JwtAuth.config.assign({session_paths: ['']}
JwtAuth.config
ha.clear
ha
ha.transform_values!{|v| nil}
ha
ha.transform_values {|v| 3}
ha
ha = {a:1, b:2, c:3}
h
h.transform_values { |v| 3}
h.transform_values(3)
h.each{|k, v| v=nil}
h = {a:1, b:2}
JwtAuth.config.settings.class
JwtAuth.config.settings
JwtAuth.config
exit
last_request.params
last_request.parmas
last_request.path
last_request
post '/bam', a: 1
Rack::Request.new(last_request.env)
last_request.env
last_request
app.public_methods
app.env
get '/path'
app.env
app
exit
request.cookies
request.session
request.session['bam']
request.session['bam'] = 'boop'
request.session
request.cookies
request.cookie
env.cookies
env
exit
JSON.parse(subject.body)
subject.body
subject.headers
subject.status
subject
exit
get sp
get ep
ep = app_config[:exclude_paths][0]
sp = app_config[:session_paths][0]
app
get(app_config[:session_paths][0])
app_config[:session_paths][0]
app_ocnfig(:session_paths][0])
app_ocnfig(:session_paths][0]
exit
subject
subject.status
exit
request.path
JwtAuth.config.session_paths
JwtAuth.config
request
c
exit
settings_hash
exit
subject.content_type
subject.content
subject.location
subject.status
subject
exit
subject
manditory_settings
exit
request.cookies.class
request.cookies
exit
request.cookies[JwtAuth.config.cookie_name]
request.cookies[JwtAuth.config.cookie_name] = 'boom'
request.class
c
JwtAuth.config.cookie_name
request.cookies
exit
JwtAuth.config.cookie_name
exit
JwtAuth.config.settings = {}
JwtAuth.config.settings.class
JwtAuth.config.settings
JwtAuth.config
c
exit
JwtAuth.config
root_excluded_paths
request.path_info
exit
JwtAuth.config.url_root
root_excluded_paths
